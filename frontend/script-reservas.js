let nombreUsuario = "";
let currentUser = null;
let peliculasData = [];
let horariosData = [];
let asientosReservadosData = [];

// Objeto para guardar asientos seleccionados temporalmente (para UI)
const asientosSeleccionados = {
  1: new Set(),
  2: new Set(),
  3: new Set(),
  4: new Set(),
  5: new Set()
};

// Flag para prevenir eventos autom√°ticos durante limpieza
let isClearing = false;

// Funci√≥n wrapper para manejar cambios de horario
function onHorarioChange() {
    const horarioId = document.getElementById("horarioSeleccion").value;
    console.log('üé¨ === CAMBIO DE HORARIO DETECTADO ===');
    console.log('üé¨ Horario seleccionado:', horarioId);
    console.log('üé¨ isClearing flag:', isClearing);
    
    if (isClearing) {
        console.log('‚è≠Ô∏è Ignorando evento onHorarioChange porque estamos limpiando');
        return;
    }
    
    console.log('‚úÖ Procesando cambio de horario v√°lido');
    
    if (horarioId) {
        console.log('üîÑ Cargando asientos reservados para horario:', horarioId);
        cargarAsientosReservados();
    } else {
        console.log('‚ö†Ô∏è No hay horario seleccionado, limpiando asientos');
        asientosReservadosData = [];
        generarAsientos();
    }
}

// Funci√≥n para limpiar completamente el estado de selecci√≥n
async function limpiarEstadoCompleto(recargarHorarios = true) {
    console.log('üßπ === LIMPIEZA COMPLETA DEL ESTADO ===');
    
    isClearing = true;
    
    // Limpiar selecciones
    document.getElementById("horarioSeleccion").value = "";
    document.getElementById("horarioSeleccion").selectedIndex = 0;
    
    // Limpiar datos en memoria
    asientosReservadosData = [];
    
    // Limpiar asientos seleccionados
    const sala = document.getElementById("salaSeleccion").value;
    if (sala && asientosSeleccionados[sala]) {
        asientosSeleccionados[sala].clear();
    }
    
    // Regenerar asientos limpios
    generarAsientos();
    
    isClearing = false;
    
    // IMPORTANTE: Recargar horarios para la pel√≠cula actual despu√©s de limpiar (solo si no estamos ya en cargarHorarios)
    if (recargarHorarios) {
        const peliculaActual = document.getElementById("peliculaSeleccion").value;
        console.log('üîÑ Verificando recarga de horarios...');
        console.log('üîÑ Pel√≠cula actual seleccionada:', peliculaActual);
        console.log('üîÑ ¬øDeber√≠a recargar horarios?', !!peliculaActual);
        
        if (peliculaActual) {
            console.log('üîÑ Recargando horarios para pel√≠cula actual:', peliculaActual);
            await cargarHorarios();
            console.log('üîÑ Recarga de horarios completada');
        } else {
            console.log('‚ö†Ô∏è No hay pel√≠cula seleccionada para recargar horarios');
        }
    } else {
        console.log('‚è≠Ô∏è Salteando recarga de horarios (recargarHorarios = false)');
    }
    
    console.log('‚úÖ Estado completamente limpiado');
}

// Funci√≥n para formatear tiempo
function formatTime(timeString, dateString = null) {
    try {
        // Si timeString ya est√° en formato HH:MM, devolverlo directamente
        if (timeString && /^\d{1,2}:\d{2}$/.test(timeString)) {
            return timeString;
        }
        
        // Si es una fecha completa, extraer solo la hora
        if (timeString && timeString.includes('T')) {
            const date = new Date(timeString);
            return date.toLocaleTimeString('es-ES', { 
                hour: '2-digit', 
                minute: '2-digit',
                hour12: false 
            });
        }
        
        // Si tenemos fecha y hora por separado, combinarlas
        if (dateString && timeString) {
            const fullDateTime = `${dateString}T${timeString}:00`;
            const date = new Date(fullDateTime);
            return date.toLocaleTimeString('es-ES', { 
                hour: '2-digit', 
                minute: '2-digit',
                hour12: false 
            });
        }
        
        // Si no se puede parsear, devolver el string original
        return timeString || 'Horario no disponible';
    } catch (error) {
        // Si hay error, devolver el string original
        return timeString || 'Horario no disponible';
    }
}

// Funci√≥n para formatear fechas
function formatDate(dateString) {
    try {
        if (!dateString) return 'Fecha no disponible';
        
        // Si ya est√° en formato YYYY-MM-DD, convertir a formato legible
        if (/^\d{4}-\d{2}-\d{2}$/.test(dateString)) {
            const date = new Date(dateString + 'T00:00:00');
            return date.toLocaleDateString('es-ES', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
        }
        
        // Si es una fecha completa, formatearla
        const date = new Date(dateString);
        return date.toLocaleDateString('es-ES', {
            year: 'numeric',
            month: 'long', 
            day: 'numeric'
        });
    } catch (error) {
        return dateString || 'Fecha no disponible';
    }
}

async function cargarDatosIniciales() {
    try {
        // Obtener datos del usuario
        const userData = getUserData();
        if (userData) {
            nombreUsuario = userData.username;
            currentUser = userData.user || { username: userData.username };
        }
        
        // Mostrar caracter√≠sticas de administrador si aplica
        toggleAdminFeatures();
        
        await cargarPeliculas();
        // Verificar y corregir cualquier inconsistencia entre pel√≠cula y horario seleccionados
        await verificarConsistenciaPeliculaHorario();
        // Seleccionar la primera sala por defecto
        document.getElementById("salaSeleccion").value = "1";
        generarAsientos();
        
        // Si hay un horario previamente seleccionado, cargar sus asientos reservados
        const horarioSeleccionado = document.getElementById("horarioSeleccion").value;
        if (horarioSeleccionado) {
            await cargarAsientosReservados();
        }
    } catch (error) {
        console.error('Error cargando datos iniciales:', error);
        showNotification('Error cargando datos: ' + error.message, 'error');
    }
}

// Funci√≥n para verificar y corregir inconsistencias entre pel√≠cula y horario
async function verificarConsistenciaPeliculaHorario() {
    try {
        const peliculaId = document.getElementById("peliculaSeleccion").value;
        const horarioId = document.getElementById("horarioSeleccion").value;
        
        // Si no hay pel√≠cula o horario seleccionado, no hay nada que verificar
        if (!peliculaId || !horarioId) {
            console.log('üîç No hay pel√≠cula y horario para verificar consistencia');
            return;
        }
        
        // Cargar horarios si no est√°n cargados
        if (horariosData.length === 0) {
            const response = await retryApiCall(() => ShowtimesAPI.getAll());
            horariosData = Array.isArray(response) ? response : (response.showtimes || []);
        }
        
        // Verificar si el horario seleccionado pertenece a la pel√≠cula seleccionada
        const horarioSeleccionado = horariosData.find(h => h.showtime_id == horarioId);
        if (horarioSeleccionado && horarioSeleccionado.movie_id != peliculaId) {
            console.warn('‚ö†Ô∏è INCONSISTENCIA DETECTADA al cargar: pel√≠cula/horario no coinciden');
            console.warn('Pel√≠cula seleccionada:', peliculaId);
            console.warn('Horario seleccionado:', horarioSeleccionado);
            
            // Usar la funci√≥n de limpieza completa
            await limpiarEstadoCompleto();
            
            console.log('‚úÖ Inconsistencia corregida autom√°ticamente');
            showNotification('Se detect√≥ una selecci√≥n inconsistente que fue corregida autom√°ticamente.', 'info');
        } else {
            console.log('‚úÖ Verificaci√≥n de consistencia: Todo correcto');
        }
    } catch (error) {
        console.error('Error verificando consistencia:', error);
    }
}

async function cargarPeliculas() {
    try {
        const response = await retryApiCall(() => MoviesAPI.getAll());
        // El API devuelve directamente el array de pel√≠culas
        peliculasData = Array.isArray(response) ? response : (response.movies || []);
        
        const select = document.getElementById("peliculaSeleccion");
        select.innerHTML = '<option value="">Seleccione una pel√≠cula</option>';
        
        peliculasData.forEach(pelicula => {
            const option = document.createElement("option");
            option.value = pelicula.id;
            option.textContent = pelicula.title || `Pel√≠cula ${pelicula.id}`;
            select.appendChild(option);
        });
        
        console.log('Pel√≠culas cargadas:', peliculasData);
    } catch (error) {
        console.log('Error cargando pel√≠culas:', error);
        showNotification('Error cargando pel√≠culas: ' + error.message, 'error');
    }
}

async function cargarHorarios() {
    const peliculaId = document.getElementById("peliculaSeleccion").value;
    const horarioSelect = document.getElementById("horarioSeleccion");
    const salaSelector = document.getElementById("salaSeleccion");
    
    console.log('üé¨ === CARGANDO HORARIOS ===');
    console.log('üé¨ Pel√≠cula seleccionada:', peliculaId);
    console.log('üé¨ isClearing flag:', isClearing);
    
    // Desbloquear selector de sala al cambiar de pel√≠cula
    salaSelector.disabled = false;
    salaSelector.style.opacity = "1";
    
    // Limpiar asientos reservados de la pel√≠cula anterior
    asientosReservadosData = [];
    console.log('üßπüßπüßπ ASIENTOS LIMPIADOS AL CAMBIAR PEL√çCULA üßπüßπüßπ');
    console.log('üßπ asientosReservadosData.length despu√©s de limpiar:', asientosReservadosData.length);
    
    // Establecer flag para prevenir eventos autom√°ticos
    isClearing = true;
    
    if (!peliculaId) {
        horarioSelect.innerHTML = '<option value="">Seleccione un horario</option>';
        horarioSelect.value = "";
        isClearing = false;
        // Regenerar asientos limpios cuando no hay pel√≠cula seleccionada
        generarAsientos();
        return;
    }

    try {
        const response = await retryApiCall(() => ShowtimesAPI.getAll());
        // El API devuelve directamente el array de horarios
        horariosData = Array.isArray(response) ? response : (response.showtimes || []);
        
        // Filtrar horarios por pel√≠cula seleccionada
        console.log('üé≠ TODOS LOS HORARIOS del servidor:', horariosData);
        console.log('üé≠ PEL√çCULA SELECCIONADA ID:', peliculaId);
        console.log('üé≠ TIPO de peliculaId:', typeof peliculaId);
        
        const horariosPelicula = horariosData.filter(horario => {
            const coincide = horario.movie_id == peliculaId;
            console.log(`üé≠ Horario ID ${horario.showtime_id}: movie_id=${horario.movie_id} (tipo: ${typeof horario.movie_id}), coincide con pel√≠cula ${peliculaId}: ${coincide}`);
            return coincide;
        });
        
        console.log('üé≠ HORARIOS FILTRADOS para pel√≠cula:', horariosPelicula);
        
        horarioSelect.innerHTML = '<option value="">Seleccione un horario</option>';
        
        // IMPORTANTE: Limpiar la selecci√≥n de horario al cambiar de pel√≠cula
        // Esto previene que quede seleccionado un horario de otra pel√≠cula
        await limpiarEstadoCompleto(false); // false = no recargar horarios (ya estamos carg√°ndolos)
        console.log('üßπ Estado limpiado al cambiar pel√≠cula');
        
        horariosPelicula.forEach(horario => {
            const option = document.createElement("option");
            option.value = horario.showtime_id; // Usar showtime_id en lugar de id
            // Usar datetime para extraer fecha y hora
            const fechaFormateada = formatDate(horario.datetime);
            const horaFormateada = formatTime(horario.datetime);
            option.textContent = `${horaFormateada} - ${fechaFormateada} - Sala ${horario.theater_id}`;
            option.dataset.theaterId = horario.theater_id;
            option.dataset.movieId = horario.movie_id; // Agregar movie_id para debug
            horarioSelect.appendChild(option);
            
            console.log(`üé≠ Agregando horario: ID=${horario.showtime_id}, Movie_ID=${horario.movie_id}, Theater=${horario.theater_id}`);
        });
        
        console.log('Horarios cargados:', horariosPelicula);
        if (horariosPelicula.length === 0) {
            showNotification('No hay horarios disponibles para esta pel√≠cula', 'info');
        }
        
        // Regenerar asientos limpios despu√©s de cargar nuevos horarios
        // Tambi√©n limpiar asientos reservados porque ya no hay horario seleccionado
        asientosReservadosData = [];
        generarAsientos();
        
        // Limpiar flag al finalizar
        isClearing = false;
    } catch (error) {
        console.log('Error cargando horarios:', error);
        showNotification('Error cargando horarios: ' + error.message, 'error');
        isClearing = false; // Asegurar que se limpia el flag incluso en caso de error
    }
}

async function cargarAsientosReservados() {
    // Si estamos en proceso de limpieza, no ejecutar esta funci√≥n
    if (isClearing) {
        console.log('‚è≠Ô∏è Saltando cargarAsientosReservados porque estamos limpiando');
        return;
    }
    
    const horarioId = document.getElementById("horarioSeleccion").value;
    const salaSelector = document.getElementById("salaSeleccion");
    
    console.log('üéØ === CARGANDO ASIENTOS RESERVADOS ===');
    console.log('üéØ Horario ID:', horarioId);
    console.log('üéØ isClearing flag:', isClearing);
    
    if (!horarioId) {
        console.log('‚ö†Ô∏è No hay horario seleccionado, generando asientos vac√≠os');
        // Desbloquear selector de sala si no hay horario seleccionado
        salaSelector.disabled = false;
        salaSelector.style.opacity = "1";
        // Limpiar completamente los asientos reservados
        asientosReservadosData = [];
        generarAsientos();
        return;
    }

    // VALIDACI√ìN CR√çTICA: Verificar que el horario pertenece a la pel√≠cula actual
    const peliculaId = document.getElementById("peliculaSeleccion").value;
    if (peliculaId && horariosData.length > 0) {
        const horarioSeleccionado = horariosData.find(h => h.showtime_id == horarioId);
        if (horarioSeleccionado && horarioSeleccionado.movie_id != peliculaId) {
            console.error('‚ùå INCONSISTENCIA EN cargarAsientosReservados');
            console.error('Pel√≠cula actual:', peliculaId);
            console.error('Horario seleccionado:', horarioSeleccionado);
            
            // Usar la funci√≥n de limpieza completa
            await limpiarEstadoCompleto();
            showNotification('Selecci√≥n inconsistente detectada y corregida.', 'warning');
            return;
        }
    }

    // Bloquear selector de sala una vez que se selecciona un horario
    salaSelector.disabled = true;
    salaSelector.style.opacity = "0.6";

    // IMPORTANTE: Limpiar asientos reservados anteriores antes de cargar nuevos
    asientosReservadosData = [];
    console.log('üßπ Asientos reservados limpiados antes de cargar el horario:', horarioId);

    try {
        console.log('üîÑ Cargando asientos reservados para horario:', horarioId);
        console.log('üåê Llamando al endpoint:', `/reserved_seats/showtime/${horarioId}`);
        console.log('üé¨ IMPORTANTE: Estos asientos son SOLO para el horario ID:', horarioId);
        
        // Verificar qu√© pel√≠cula corresponde a este horario
        const peliculaActual = document.getElementById("peliculaSeleccion").value;
        const horarioActual = horariosData.find(h => h.showtime_id == horarioId);
        console.log('üé≠ VERIFICACI√ìN: Pel√≠cula seleccionada:', peliculaActual);
        console.log('üé≠ VERIFICACI√ìN: Horario encontrado:', horarioActual);
        if (horarioActual) {
            console.log('üé≠ VERIFICACI√ìN: Movie_ID del horario:', horarioActual.movie_id);
            console.log('üé≠ VERIFICACI√ìN: ¬øCoinciden?', horarioActual.movie_id == peliculaActual);
        }
        
        const asientosReservados = await ReservedSeatsAPI.getByShowtime(parseInt(horarioId));
        asientosReservadosData = asientosReservados;
        
        // Debug: Log MUY detallado de asientos reservados
        console.log('üìã RESPUESTA COMPLETA del servidor:', asientosReservados);
        console.log('üìã Tipo de respuesta:', typeof asientosReservados);
        console.log('üìã Es array:', Array.isArray(asientosReservados));
        console.log('üìã Cantidad de asientos reservados:', asientosReservados.length);
        console.log('üìã asientosReservadosData actualizado:', asientosReservadosData);
        
        if (asientosReservados.length > 0) {
            console.log('ü™ë DETALLES DE CADA ASIENTO RESERVADO:');
            console.log('üö® HORARIO_ID ACTUAL:', horarioId);
            asientosReservados.forEach((asiento, index) => {
                console.log(`   Asiento ${index + 1}:`, asiento);
                console.log(`   Tipo:`, typeof asiento);
            });
        } else {
            console.log('‚ö†Ô∏è NO SE ENCONTRARON ASIENTOS RESERVADOS para este horario');
        }
        
        // Actualizar la sala seleccionada basada en el horario
        const horarioSelect = document.getElementById("horarioSeleccion");
        const selectedOption = horarioSelect.options[horarioSelect.selectedIndex];
        if (selectedOption && selectedOption.dataset.theaterId) {
            document.getElementById("salaSeleccion").value = selectedOption.dataset.theaterId;
        }
        
        // Limpiar selecciones previas antes de generar asientos
        const sala = document.getElementById("salaSeleccion").value;
        if (sala && asientosSeleccionados[sala]) {
            asientosSeleccionados[sala].clear();
            console.log('üßπ Asientos seleccionados limpiados para sala:', sala);
        }
        
        generarAsientos();
        console.log('‚úÖ Asientos reservados cargados y vista actualizada');
    } catch (error) {
        console.error('‚ùå ERROR COMPLETO cargando asientos reservados:', error);
        console.error('‚ùå Stack trace:', error.stack);
        asientosReservadosData = [];
        generarAsientos();
    }
}

function generarAsientos() {
    const cont = document.getElementById("asientosContainer");
    cont.innerHTML = "";
    
    const filas = ["A", "B", "C", "D", "E", "F"];
    const sala = document.getElementById("salaSeleccion").value;
    const horarioId = document.getElementById("horarioSeleccion").value;
    
    // Log para debug del problema de asientos cruzados
    console.log('üéØ === GENERANDO ASIENTOS ===');
    console.log('üéØ Sala seleccionada:', sala);
    console.log('üéØ Horario seleccionado:', horarioId);
    console.log('üéØ Asientos reservados en memoria:', asientosReservadosData.length);
    console.log('üéØ Contenido de asientosReservadosData:', asientosReservadosData);
    if (asientosReservadosData.length > 0) {
        console.log('üéØ Primer asiento reservado (ejemplo):', asientosReservadosData[0]);
        console.log('üéØ Tipo del primer asiento:', typeof asientosReservadosData[0]);
    }
    
    if (!sala) {
        cont.innerHTML = "<p>Seleccione una sala</p>";
        return;
    }
    
    const seleccionados = asientosSeleccionados[sala];
    
    // Crear t√≠tulo de pantalla
    const pantalla = document.createElement("div");
    pantalla.style.cssText = "text-align: center; margin-bottom: 20px; padding: 10px; background: #f0f0f0; border-radius: 10px; font-weight: bold;";
    pantalla.textContent = "üé¨ PANTALLA üé¨";
    cont.appendChild(pantalla);

    for (let fila of filas) {
        const filaDiv = document.createElement("div");
        filaDiv.style.cssText = "display: flex; justify-content: center; margin-bottom: 10px; gap: 5px;";
        
        for (let i = 1; i <= 10; i++) {
            const idAsiento = `${fila}${i}`;
            const div = document.createElement("div");
            div.className = "asiento";
            div.dataset.fila = fila;
            div.dataset.numero = i;
            div.textContent = idAsiento;
            
            // Verificar si el asiento est√° reservado en el backend
            const estaReservado = asientosReservadosData.some(asiento => {
                // El backend ahora devuelve un array de strings simples como ["A1", "A2"]
                // No objetos con propiedades
                if (typeof asiento === 'string') {
                    return asiento === idAsiento;
                }
                
                // Mantener compatibilidad con formato anterior por si acaso
                const coincideAsientoCompleto = asiento.seat_number === idAsiento;
                const coincideFilaYNumero = asiento.seat_row === fila && 
                                           String(asiento.seat_number_parsed) === String(i);
                
                return coincideAsientoCompleto || coincideFilaYNumero;
            });
            
            if (estaReservado) {
                console.log(`üîí ¬°ASIENTO ${idAsiento} EST√Å RESERVADO!`);
                div.classList.add("ocupado");
                div.title = "Asiento ocupado";
            } else if (seleccionados.has(idAsiento)) {
                div.classList.add("reservado");
                div.title = "Asiento seleccionado";
                div.onclick = () => {
                    div.classList.remove("reservado");
                    div.classList.add("disponible");
                    seleccionados.delete(idAsiento);
                };
            } else {
                div.classList.add("disponible");
                div.title = "Asiento disponible";
                div.onclick = () => {
                    div.classList.remove("disponible");
                    div.classList.add("reservado");
                    seleccionados.add(idAsiento);
                };
            }
            
            filaDiv.appendChild(div);
        }
        cont.appendChild(filaDiv);
    }
    
    // Agregar leyenda
    const leyenda = document.createElement("div");
    leyenda.style.cssText = "margin-top: 20px; text-align: center; font-size: 14px;";
    leyenda.innerHTML = `
        <div style="display: flex; justify-content: center; gap: 20px; flex-wrap: wrap;">
            <span>üü¢ Disponible</span>
            <span>üîµ Seleccionado</span>
            <span>üî¥ Ocupado</span>
        </div>
    `;
    cont.appendChild(leyenda);
}

async function comprar(event) {
    // Prevenir cualquier comportamiento por defecto
    if (event) {
        event.preventDefault();
        event.stopPropagation();
    }
    
    console.log('üöÄ Iniciando proceso de compra...');
    
    const horarioId = document.getElementById("horarioSeleccion").value;
    const peliculaId = document.getElementById("peliculaSeleccion").value;
    const sala = document.getElementById("salaSeleccion").value;
    
    // VALIDACI√ìN CR√çTICA: Verificar que el horario seleccionado pertenece a la pel√≠cula seleccionada
    if (horarioId && peliculaId) {
        const horarioSeleccionado = horariosData.find(h => h.showtime_id == horarioId);
        if (horarioSeleccionado && horarioSeleccionado.movie_id != peliculaId) {
            console.error('‚ùå BUG DETECTADO: Horario seleccionado no corresponde a la pel√≠cula');
            console.error('Pel√≠cula seleccionada:', peliculaId);
            console.error('Horario seleccionado:', horarioSeleccionado);
            showNotification("Error: El horario seleccionado no corresponde a la pel√≠cula. Por favor, seleccione un horario v√°lido.", 'error');
            // Usar la funci√≥n de limpieza completa
            await limpiarEstadoCompleto();
            return false;
        }
        console.log('‚úÖ Validaci√≥n horario-pel√≠cula CORRECTA');
    }
    
    if (!horarioId || !peliculaId) {
        showNotification("Seleccione una pel√≠cula y un horario.", 'error');
        return false;
    }
    
    const seleccionados = asientosSeleccionados[sala];
    if (seleccionados.size === 0) {
        showNotification("Seleccione al menos un asiento.", 'error');
        return false;
    }

    const comprarButton = document.querySelector('button[onclick*="comprar"]');
    
    try {
        setLoading(comprarButton, true);
        
        // Crear la venta
        const asientosSeleccionadosArray = Array.from(seleccionados);
        const saleData = {
            customer_user_id: currentUser.id || 1, // Usar customer_user_id como est√° en la tabla
            showtime_id: parseInt(horarioId),
            ticket_quantity: seleccionados.size, // Usar ticket_quantity como est√° en la tabla
            subtotal: seleccionados.size * 75,
            total: seleccionados.size * 75, // Usar total como est√° en la tabla
            payment_method: "cash",
            seats: asientosSeleccionadosArray
        };
        
        console.log('üì§ Enviando datos de venta:', saleData);
        console.log('üì§ Detalles de los datos:');
        console.log('- customer_user_id:', saleData.customer_user_id, typeof saleData.customer_user_id);
        console.log('- showtime_id:', saleData.showtime_id, typeof saleData.showtime_id);
        console.log('- ticket_quantity:', saleData.ticket_quantity, typeof saleData.ticket_quantity);
        console.log('- total:', saleData.total, typeof saleData.total);
        console.log('- payment_method:', saleData.payment_method, typeof saleData.payment_method);
        console.log('- seats:', saleData.seats, Array.isArray(saleData.seats));
        
        const saleResponse = await SalesAPI.create(saleData);
        console.log('‚úÖ Venta creada exitosamente:', saleResponse);
        
        // Los asientos ya se reservan autom√°ticamente en el endpoint de crear venta
        
        // Preparar datos del ticket
        const pelicula = peliculasData.find(p => p.id == peliculaId);
        const horario = horariosData.find(h => h.showtime_id == horarioId);
        
        const ticketData = {
            usuario: nombreUsuario || 'Usuario',
            pelicula: pelicula ? pelicula.title : 'Pel√≠cula seleccionada',
            genero: pelicula ? (pelicula.original_language === 'en' ? 'Pel√≠cula Internacional' : 'Pel√≠cula Nacional') : 'N/A',
            duracion: pelicula && pelicula.duration_minutes ? pelicula.duration_minutes : 'N/A',
            horario: horario ? formatTime(horario.datetime) : 'Horario seleccionado',
            fecha: horario ? formatDate(horario.datetime) : new Date().toLocaleDateString('es-ES'),
            sala: sala,
            asientos: Array.from(seleccionados),
            total: seleccionados.size * 75,
            fechaCompra: new Date().toLocaleDateString('es-ES'),
            horaCompra: new Date().toLocaleTimeString('es-ES')
        };
        
        // Guardar datos del ticket en localStorage
        localStorage.setItem('ticketData', JSON.stringify(ticketData));
        console.log('üé´ Datos del ticket guardados en localStorage:', ticketData);
        
        // Verificar que los datos se guardaron correctamente
        const verificarTicket = localStorage.getItem('ticketData');
        console.log('‚úÖ Verificaci√≥n de datos guardados:', !!verificarTicket);
        
        // Limpiar asientos seleccionados
        seleccionados.clear();
        
        // Recargar asientos reservados inmediatamente para reflejar la compra
        console.log('üîÑ Recargando asientos despu√©s de compra exitosa...');
        await cargarAsientosReservados();
        
        // Regenerar la visualizaci√≥n de asientos para mostrar los reci√©n ocupados
        generarAsientos();
        
        // Mostrar mensaje de √©xito
        console.log('üéâ ¬°Compra realizada exitosamente!');
        showNotification('¬°Compra realizada exitosamente!', 'success');
        
        // Agregar bot√≥n de backup para ir al ticket
        comprarButton.innerHTML = 'üé´ Ver Ticket';
        comprarButton.onclick = () => window.location.href = './ticket.html';
        comprarButton.style.backgroundColor = '#28a745';
        comprarButton.disabled = false;
        
        // Verificar autenticaci√≥n antes de redirigir
        console.log('üîê Verificando autenticaci√≥n antes de redirigir...');
        console.log('üîê isAuthenticated():', isAuthenticated());
        console.log('üîê localStorage cinemaUser:', !!localStorage.getItem('cinemaUser'));
        
        // Redirecci√≥n inmediata y como backup despu√©s de un delay
        console.log('üîÑ Intentando redirecci√≥n inmediata...');
        try {
            window.location.href = './ticket.html';
        } catch (e) {
            console.error('‚ùå Redirecci√≥n inmediata fall√≥:', e);
        }
        
        // Esperar un momento para que el usuario vea los asientos actualizados
        setTimeout(() => {
            console.log('üîÑ Iniciando redirecci√≥n al ticket...');
            console.log('üîÑ URL actual:', window.location.href);
            
            try {
                // M√©todo simple y directo
                console.log('üîÑ Redirigiendo a ticket.html...');
                
                // Intentar m√∫ltiples m√©todos de redirecci√≥n
                if (window.location.replace) {
                    window.location.replace('./ticket.html');
                } else if (window.location.href) {
                    window.location.href = './ticket.html';
                } else {
                    // M√©todo de √∫ltimo recurso
                    window.location = './ticket.html';
                }
                
                // Verificaci√≥n adicional despu√©s de un delay
                setTimeout(() => {
                    if (!window.location.href.includes('ticket.html')) {
                        console.log('üîÑ Redirecci√≥n no detectada, intentando m√©todo alternativo...');
                        window.open('./ticket.html', '_self');
                    }
                }, 500);
                
            } catch (error) {
                console.error('‚ùå Error en redirecci√≥n:', error);
                // Si falla la redirecci√≥n, al menos mostrar los datos del ticket aqu√≠
                alert('Compra realizada exitosamente. Por favor, navegue manualmente a la p√°gina del ticket.');
            }
        }, 1000); // Reducir a 1 segundo
        
    } catch (error) {
        console.error('‚ùå Error procesando compra:', error);
        showNotification('Error procesando la compra: ' + error.message, 'error');
    } finally {
        setLoading(comprarButton, false);
    }
    
    return false; // Prevenir cualquier env√≠o de formulario
}

// Funci√≥n para actualizar asientos despu√©s de una compra exitosa
async function actualizarAsientosDespuesCompra() {
    try {
        console.log('üîÑ Actualizando asientos despu√©s de compra...');
        // Recargar asientos reservados para mostrar los nuevos asientos ocupados
        await cargarAsientosReservados();
        console.log('‚úÖ Asientos actualizados despu√©s de la compra');
    } catch (error) {
        console.error('‚ùå Error actualizando asientos despu√©s de compra:', error);
    }
}

// Funci√≥n para forzar recarga de datos cuando se regresa a la p√°gina
function forzarRecargaDatos() {
    const horarioSeleccionado = document.getElementById("horarioSeleccion").value;
    if (horarioSeleccionado) {
        console.log('üîÑ Forzando recarga de asientos para horario:', horarioSeleccionado);
        cargarAsientosReservados();
    }
}

// Funci√≥n de inicializaci√≥n para establecer el estado inicial
function inicializarEstadoSelectores() {
    const salaSelector = document.getElementById("salaSeleccion");
    const horarioSelector = document.getElementById("horarioSeleccion");
    
    // Si no hay horario seleccionado, asegurar que el selector de sala est√© desbloqueado
    if (!horarioSelector.value) {
        salaSelector.disabled = false;
        salaSelector.style.opacity = "1";
    }
}

// Ejecutar inicializaci√≥n cuando la p√°gina cargue
document.addEventListener('DOMContentLoaded', function() {
    inicializarEstadoSelectores();
    
    // Tambi√©n verificar autenticaci√≥n
    if (!isAuthenticated()) {
        window.location.href = 'login.html';
        return;
    }
    
    // Cargar datos iniciales
    cargarPeliculas();
});

// Funci√≥n para verificar si el usuario es administrador
function isUserAdmin() {
    try {
        const token = localStorage.getItem('authToken');
        if (!token) return false;
        
        // Decodificar el token JWT
        const payload = JSON.parse(atob(token.split('.')[1]));
        return payload.role === 'admin';
    } catch (error) {
        console.error('Error verificando rol de administrador:', error);
        return false;
    }
}

// Funci√≥n para mostrar/ocultar enlaces de administrador
function toggleAdminFeatures() {
    const adminReportsLink = document.getElementById('adminReportsLink');
    const adminPanelLink = document.getElementById('adminPanelLink');
    
    if (isUserAdmin()) {
        if (adminReportsLink) {
            adminReportsLink.style.display = 'inline-block';
        }
        if (adminPanelLink) {
            adminPanelLink.style.display = 'inline-block';
        }
        console.log('‚úÖ Usuario administrador detectado, mostrando enlaces de administraci√≥n');
    } else {
        if (adminReportsLink) {
            adminReportsLink.style.display = 'none';
        }
        if (adminPanelLink) {
            adminPanelLink.style.display = 'none';
        }
        console.log('‚ÑπÔ∏è Usuario regular, ocultando enlaces de administraci√≥n');
    }
}

// Funci√≥n para mostrar/ocultar caracter√≠sticas de administrador
async function toggleAdminFeatures() {
    console.log('üîê Verificando permisos de administrador...');
    
    try {
        // Obtener datos del usuario del token
        const token = localStorage.getItem('authToken');
        if (!token) {
            console.log('‚ùå No hay token disponible');
            return;
        }

        let userRole = 'customer'; // Valor por defecto
        
        // Intentar decodificar como JWT primero
        try {
            if (token.includes('.')) {
                // Es un JWT, intentar decodificar
                const payload = JSON.parse(atob(token.split('.')[1]));
                console.log('üîç Payload del JWT:', payload);
                userRole = payload.role || 'customer';
            } else {
                // Es un token de prueba, verificar si es de admin
                console.log('üîç Token de prueba detectado:', token);
                
                // Obtener datos del usuario guardados
                const userData = localStorage.getItem('userData');
                if (userData) {
                    const parsedUserData = JSON.parse(userData);
                    userRole = parsedUserData.role || 'customer';
                    console.log('üîç Datos de usuario desde localStorage:', parsedUserData);
                } else {
                    // Como fallback, verificar en la base de datos el rol del usuario actual
                    const storedUser = localStorage.getItem('cinemaUser');
                    if (storedUser) {
                        const user = JSON.parse(storedUser);
                        // Para usuarios espec√≠ficos conocidos, asignar rol admin
                        if (user.username === 'admin' || user.username === 'Isaura') {
                            userRole = 'admin';
                        }
                    }
                }
            }
        } catch (decodeError) {
            console.warn('‚ö†Ô∏è Error decodificando token:', decodeError);
            
            // Fallback: verificar usuarios admin conocidos
            const storedUser = localStorage.getItem('cinemaUser');
            if (storedUser) {
                const user = JSON.parse(storedUser);
                if (user.username === 'admin' || user.username === 'Isaura') {
                    userRole = 'admin';
                }
            }
        }
        
        console.log('üë§ Rol del usuario determinado:', userRole);
        
        // Mostrar caracter√≠sticas de admin si el usuario es administrador
        const adminReportsLink = document.getElementById('adminReportsLink');
        const adminPanelLink = document.getElementById('adminPanelLink');
        const adminSection = document.getElementById('adminSection');
        
        if (userRole === 'admin') {
            if (adminReportsLink) {
                adminReportsLink.style.display = 'inline-block';
            }
            if (adminPanelLink) {
                adminPanelLink.style.display = 'inline-block';
            }
            if (adminSection) {
                adminSection.style.display = 'block';
            }
            console.log('‚úÖ Caracter√≠sticas de administrador activadas');
        } else {
            if (adminReportsLink) {
                adminReportsLink.style.display = 'none';
            }
            if (adminPanelLink) {
                adminPanelLink.style.display = 'none';
            }
            if (adminSection) {
                adminSection.style.display = 'none';
            }
            console.log('‚ùå Usuario no es administrador');
        }
        
    } catch (error) {
        console.error('‚ùå Error verificando permisos de admin:', error);
    }
}

toggleAdminFeatures();

// Funci√≥n para mostrar estad√≠sticas r√°pidas en el panel de admin
async function showQuickStats() {
    console.log('üìä Mostrando estad√≠sticas r√°pidas...');
    
    const quickStats = document.getElementById('quickStats');
    const quickStatsContent = document.getElementById('quickStatsContent');
    
    if (!quickStats || !quickStatsContent) {
        console.error('‚ùå Elementos de estad√≠sticas no encontrados');
        return;
    }
    
    // Mostrar indicador de carga
    quickStatsContent.innerHTML = '<div style="text-align: center; padding: 20px; color: white;">üîÑ Cargando estad√≠sticas...</div>';
    quickStats.style.display = 'block';
    
    try {
        // Cargar resumen de ventas
        const response = await ReportsAPI.getSalesSummary();
        console.log('üìä Estad√≠sticas recibidas:', response);
        
        // Procesar datos
        const summary = response.summary || {};
        const totalSales = summary.total_sales || 0;
        const totalAmount = summary.total_amount || 0;
        const uniqueCustomers = summary.unique_customers || 0;
        const mostSoldMovie = response.top_movies?.most_sold || { title: 'N/A', tickets_sold: 0 };
        
        // Mostrar estad√≠sticas
        quickStatsContent.innerHTML = `
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; color: white;">
                <div style="text-align: center;">
                    <div style="font-size: 24px; font-weight: bold; margin-bottom: 5px;">${totalSales}</div>
                    <div style="font-size: 14px; opacity: 0.9;">Ventas Totales</div>
                </div>
                <div style="text-align: center;">
                    <div style="font-size: 24px; font-weight: bold; margin-bottom: 5px;">$${totalAmount.toLocaleString()}</div>
                    <div style="font-size: 14px; opacity: 0.9;">Ingresos</div>
                </div>
                <div style="text-align: center;">
                    <div style="font-size: 24px; font-weight: bold; margin-bottom: 5px;">${uniqueCustomers}</div>
                    <div style="font-size: 14px; opacity: 0.9;">Clientes</div>
                </div>
                <div style="text-align: center;">
                    <div style="font-size: 16px; font-weight: bold; margin-bottom: 5px;">${mostSoldMovie.title}</div>
                    <div style="font-size: 14px; opacity: 0.9;">Pel√≠cula m√°s vendida (${mostSoldMovie.tickets_sold} boletos)</div>
                </div>
            </div>
            <div style="text-align: center; margin-top: 15px;">
                <button onclick="hideQuickStats()" style="background: rgba(255,255,255,0.2); color: white; border: 1px solid white; padding: 8px 16px; border-radius: 5px; cursor: pointer;">
                    Ocultar
                </button>
            </div>
        `;
        
    } catch (error) {
        console.error('‚ùå Error cargando estad√≠sticas:', error);
        quickStatsContent.innerHTML = `
            <div style="text-align: center; padding: 20px; color: white;">
                ‚ùå Error al cargar estad√≠sticas: ${error.message}
                <br><br>
                <button onclick="hideQuickStats()" style="background: rgba(255,255,255,0.2); color: white; border: 1px solid white; padding: 8px 16px; border-radius: 5px; cursor: pointer;">
                    Cerrar
                </button>
            </div>
        `;
    }
}

// Funci√≥n para ocultar estad√≠sticas r√°pidas
function hideQuickStats() {
    const quickStats = document.getElementById('quickStats');
    if (quickStats) {
        quickStats.style.display = 'none';
    }
}
